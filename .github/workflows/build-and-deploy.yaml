name: Deploy Angular App to ECR

on:
  push:
    branches:
      - main

jobs:
  one_run:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1

  dependencies:
    needs: one_run
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: pdp_app_node_modules-${{ hashFiles('package-lock.json') }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  test:
    needs: dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: pdp_app_node_modules-${{ hashFiles('package-lock.json') }}

      - name: Run tests
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm run test:ci

  build:
    needs: dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - uses: actions/cache@v3
        with:
          path: node_modules
          key: pdp_app_node_modules-${{ hashFiles('package-lock.json') }}

      - name: Build Angular app
        run: npm run build

  build_and_push_docker_image:
    needs: [test, build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - uses: actions/cache@v3
        with:
          path: node_modules
          key: pdp_app_node_modules-${{ hashFiles('package-lock.json') }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG

  trigger_lambda_deployment:
    needs: build_and_push_docker_image
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Lambda Deployment
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"image_uri\":\"${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}\"}" \
            "${{ secrets.LAMBDA_WEBHOOK_URL }}"
